#!/usr/bin/env python3
from __future__ import annotations

import argparse
import os
import shutil
import subprocess
import sys
import urllib.request
from typing import NamedTuple
from typing import Sequence


class Package(NamedTuple):
    name: str
    version: str | None


CACHE_DIR = os.path.join(
    os.getenv("XDG_CACHE_HOME", os.path.expanduser("~/.cache")),
    "workstation",
)

PACKAGES = frozenset((Package("ansible", None),))


def _step(msg: str) -> None:
    msg = f"PRE [{msg}] "
    msg += "*" * (shutil.get_terminal_size().columns - len(msg))
    print(msg, flush=True)


def pip_install(bin: str, package: Package) -> None:
    cmd = (
        bin,
        "install",
        f"{package.name}=={package.version}"
        if package.version is not None
        else f"{package.name}",
        "--upgrade",
    )
    subprocess.check_call(cmd)


def main(argv: Sequence[str] | None = None) -> int:
    parser = argparse.ArgumentParser()
    parser.add_argument("--playbook", default="workstation.yml")
    args, remainders = parser.parse_known_args(argv)

    if os.getenv("VIRTUAL_ENV") is not None:
        raise SystemExit("run should be executed outside of any virtualenv")

    os.makedirs(CACHE_DIR, exist_ok=True)

    zipapp = os.path.join(CACHE_DIR, "virtualenv.pyz")
    if not os.path.exists(zipapp):
        _step("Download virtualenv zipapp")
        urllib.request.urlretrieve(
            "https://bootstrap.pypa.io/virtualenv.pyz",
            zipapp,
        )
        print("\033[32mok\033[m")

    venv = os.path.join(CACHE_DIR, "venv")
    if not os.path.exists(venv):
        _step("Create the virtualenv")
        subprocess.run(("python3", zipapp, venv), check=True)

    for package in PACKAGES:
        path = os.path.join(
            venv,
            "lib",
            f"python{sys.version_info.major}.{sys.version_info.minor}",
            "site-packages",
            f"{package.name}-{package.version}.dist-info",
        )
        if not os.path.exists(path):
            _step(f"Install package : {package.name}")
            pip_install(os.path.join(venv, "bin", "pip"), package)

    cmd = (
        os.path.join(venv, "bin", "ansible-playbook"),
        "--inventory",
        "hosts",
        "--ask-become-pass",
        "--ask-vault-pass",
        *remainders,
        args.playbook,
    )
    return subprocess.call(cmd)


if __name__ == "__main__":
    raise SystemExit(main())
